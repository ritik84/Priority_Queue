Problem Description

/*

Given two integers arrays A and B of size N each.

Find the maximum N elements from the sum combinations (Ai + Bj) formed from elements in array A and B.



Problem Constraints
1 <= N <= 2 * 105

-1000 <= A[i], B[i] <= 1000



Input Format
First argument is an integer array A.

Second argument is an integer array B.



Output Format
Return an intger array denoting the N maximum element in descending order.



Example Input
Input 1:

 A = [1, 4, 2, 3]
 B = [2, 5, 1, 6]
Input 2:

 A = [2, 4, 1, 1]
 B = [-2, -3, 2, 4]


Example Output
Output 1:

 [10, 9, 9, 8]
Output 2:

 [8, 6, 6, 5]

*/

Solution:

vector<int> Solution::solve(vector<int> &A, vector<int> &B) {
    int N=A.size();
    vector<int> v;
    sort(A.begin(),A.end());
    sort(B.begin(),B.end());
    priority_queue<pair<int, pair<int, int> > > pq;  
    set<pair<int, int> > my_set;
    pq.push(make_pair(A[N - 1] + B[N - 1],make_pair(N-1, N-1))); 
    my_set.insert(make_pair(N - 1, N - 1));
    for(int i1=0;i1<N;i1++){
        pair<int, pair<int, int> > temp = pq.top(); 
        pq.pop();
        v.push_back(temp.first);
        int i = temp.second.first;
        int j = temp.second.second;
        int sum =A[i-1]+B[j];
        pair<int, int> temp1 = make_pair(i - 1, j);
        if (my_set.find(temp1) == my_set.end()) { 
            pq.push(make_pair(sum, temp1)); 
            my_set.insert(temp1); 
        }
        sum =A[i]+B[j-1];
        temp1 = make_pair(i , j-1);
        if (my_set.find(temp1) == my_set.end()) { 
            pq.push(make_pair(sum, temp1)); 
            my_set.insert(temp1); 
        }
    }
    return v;
}
