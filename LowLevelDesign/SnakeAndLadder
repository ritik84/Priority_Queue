Problem Description:

/*

Design Snake and ladder Game That will take Board size, number of snakes, number of ladders, number of players as an input and return player who reaches the end its as output.

Game will continue until last player will left and returns their names in the order they wins the game.

Board can be of any size.

There can be snake and ladder at any position. Position of snakes and ladders will be given as an input.

*/


Solution:

#include<bits/stdc++.h>
using namespace std;


class Board{
	public:
    	int size;
    	int start;
    	int end;
    	void setBoard(int size){
            this->start = 1;
            this->end = start+size-1;
            this->size = size;
        }
};



class Dice{
    public:
    	int minValue;
    	int maxValue;
    	void setDice(int min,int max){
            minValue = min;
            maxValue = max;
        }
    	int roll(){
            return minValue+(rand()%maxValue);
        }
};


class Ladder{
  public:
    int start;
    int end;
};

class Player{
  public: 
    string name;
    int position;
    bool won;
    Player(string name){
        this->name = name;
        this->position = 0;
        this->won = false;
    }
};


class Snake{
  public: 
    int head;
    int tail;
};

      

class Game{
    public:
    	int numberOfLadders;
    	int numberOfSnakes;
    	queue<Player> players;
    	list<Snake> snakes;
    	list<Ladder> ladders;
    	Board board;
    	Dice dice;
    	Game(int numberOfLadders, int numberOfSnakes,int size){
            this->numberOfLadders = numberOfLadders;
            this->numberOfSnakes = numberOfSnakes;
            queue<Player> q;
            this->players = q;
            list<Snake> s(numberOfSnakes);
            snakes = s;
            list<Ladder> l(numberOfLadders);
            ladders = l;
            
            board.setBoard(size);
            dice.setDice(1,6);
            initBoard();
        }
    
    	void initBoard(){
            for(int i=0;i<numberOfSnakes;i++){
                int snakeStart;
                int snakeEnd;
                cin>>snakeStart>>snakeEnd;
                snakes.push_back({snakeStart,snakeEnd});
            }
            for(int i=0;i<numberOfLadders;i++){
                int ladderStart;
                int ladderEnd;
                cin>>ladderStart>>ladderEnd;
                ladders.push_back({ladderStart,ladderEnd});
            }
        }
  
    	void addPlayer(Player player){
            players.push(player);
        }
    
    	void PlayGame(){
    	    int cnt = 1;
            while(true){
                Player player = players.front();
                players.pop();
                int value = dice.roll();
                int newPosition = player.position + value;
                if(newPosition > board.end){
                    player.position = newPosition-value;
                    players.push(player);
                }
                else{
                    player.position = getNewPosition(newPosition);
                    if(player.position == board.end){
                        player.won = true;
                        cout<<"Player secured "<<cnt++<<" position "<<player.name<<endl;
                        //break;
                    }
                    else{
                        players.push(player);
                    }
                }
                if(players.size()<2)
                    break;
            }
        }
    
    	int getNewPosition(int newPosition){
            for(Snake snake:snakes){
                if(snake.head == newPosition){
                    return snake.tail;
                }
            }
            for(Ladder ladder:ladders){
                if(ladder.start == newPosition){
                    return ladder.end;
                }
            }
            return newPosition;
        }
    
    
};



int main(){
    int boardSize;
    cin>>boardSize;
    int numberOfPlayers;
    cin>>numberOfPlayers;
    int numSnakes;
    cin>>numSnakes;
    int numLadders;
    cin>>numLadders;
    Game game(numLadders, numSnakes, boardSize);
    
    for(int i=0;i<numberOfPlayers;i++){
        string name;
        cin>>name;
        Player player(name);
        game.addPlayer(player);
    }
    game.PlayGame();
    
}